package fsm.states.clerk;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import display.DisplayManager;
import fsm.FSMManager;
import nessa.process.UIProcess;
import warehouseInventory.warehouse.Inventory;

/**
 * A process for loading a quantity of items into the inventory for testing purposes
 * 
 * @author Vannessa
 */
public class ProcessLoadTestingInventory extends UIProcess {

    public ProcessLoadTestingInventory() {
        super("DEBUG", "Load Test Inventory", "Adds a set of randomly generated items to the inventory for use of testing the program.");
    }

    // Table taken from https://donjon.bin.sh/name/markov.html
    // It is a random name generator from a source of possible names. This is the list of all possible names
    private final String[] supplierNames = new String("Alden Alec Anton Arden Arlen Armand Arron Augustus Avery Benedict Bennett Branden Brendon Britt Broderick Carter Chadwick Chas Chet Colby Cole Cordell Dalton Damien Dante Darell Darius Darron Darwin Dewitt Diego Dillon Dirk Domenic Donovan Dorian Dorsey Edison Elden Elvin Erich Galen Garret Gaston Gavin German Graham Hal Hank Harlan Hayden Herschel Hoyt Hunter Isaias Issac Jacinto Jarred Jonas Kendrick Keneth Kennith Keven Leif Lenard Lincoln Linwood Lucius Lynwood Malcolm Malik Maxwell McKinley Merlin Merrill Michal Monty Newton Nolan Porter Quinton Raphael Reid Rory Scotty Shad Stanton Stefan Thaddeus Tobias Trenton Vance Walker Walton Weldon Wes Weston Willian Winford Wyatt").split(" ");

    // A random list of modifiers generated by ME
    private final String[] modifiers = new String("Wooden,Golden,Marbled,4th Dimensional,Unreasonable,Demonic,Angleic,Beautiful,Elitist,Red,Blue,Green,Yellow,Purple,Orange,Iron,Hardened,Rotting,Resplendant,Cursed,Incarcerated,Contraband,Transparent,Glass,Discount,Alien,Superconductive,Binary,Electronic,Raw,Manufactured,Prokaryotic,Cloudy,Smart,Draconic").split(",");

    // Product name list from : https://www.listchallenges.com/the-random-things-list
    // It's a list of random items people are likely to own.
    private final String[] productNames = new String("DVD,Gum,Printer,Nail_Polish,Gift_Card,Cactus,Rubber_Duck,Stapler,Duct_Tape,Water_Gun,Beanie,Hamper,Camcorder,String_Lights,Taxidermy,Engagement_Ring,Fidget_Cube,Ladle,Stickers,Lawnmower,Toothpick,Keychain,Lantern,Passport,Stamp_Markers,Cotton_Balls,Curlers,Unicorn,Garage,Knee_Socks,Mustache,Shoe_Horn,Squirrel_Feeding_Station,Thermos,Velcro,Tackle_Box,Crazy_Straw,Curly_Shoelace,Hamster_Ball,Horse_Head_Mask,Multi_Tool,Nintendo_Switch,Pulse_Oximeter,Show,Stress_Ball,Stuffed_Dog,Tent,Trunk,Salt_Lamp").split(",");

    private final double minSupplierPrice = 0.1;
    private final double maxSupplierPrice = 100.0;
    private final double minRetailPriceOffset = 0.1;
    private final double maxRetailPriceOffset = 50.0;
    private final int minQuantity = 1;
    private final int maxQuantity = 50;

    @Override
    public void process() {
        DisplayManager d = FSMManager.display;
        d.setHeader("Load Test Inventory");
        Random rand = new Random();
        d.displayLargeMessage(Arrays.asList(new String[]{
            "Unique Suppliers : " + supplierNames.length,
            "Unique Items : " + productNames.length
        }), false);
        int amnt = d.getInputInteger("How many items should be generated? (Non-unique) : ");
        List<String> resultLines = new ArrayList<String>();
        resultLines.add("Added the following items:");
        for (int i = 0; i < amnt; i++){
            // add items
            String product = (rand.nextBoolean() ? modifiers[rand.nextInt(modifiers.length)] + "_" : "" ) + productNames[rand.nextInt(productNames.length)];
            String supplier = supplierNames[rand.nextInt(supplierNames.length)];
            double purchasePrice = rand.nextDouble() * (maxSupplierPrice - minSupplierPrice) + minSupplierPrice;
            purchasePrice -= purchasePrice % 0.01;
            double retailPrice = rand.nextDouble() * (maxRetailPriceOffset - minRetailPriceOffset) + minRetailPriceOffset + purchasePrice;
            retailPrice -= retailPrice % 0.01;
            int quantity = rand.nextInt(maxQuantity - minQuantity) + minQuantity;
            Inventory.instance().addProduct(product, supplier, purchasePrice, retailPrice, quantity);
            resultLines.add("\t" + product + " x " + quantity + " || from " + supplier);
        }
        d.displayLargeMessage(resultLines, true);
    }


}
